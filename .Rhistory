plot_regression <- function(training_percentage, wine_type, method) {
# Parameter selection
df = df_white
if(wine_type == 1) {
df = df_red
}
# Data slicing
inTrain <- createDataPartition(y=df$quality,
p=training_percentage/100.0, list=FALSE)
training <- df[inTrain,]
test <- df[-inTrain,]
# Model fit
mod_fit <- train(quality ~ ., data=training, method=method)
# Prediction
prediction <- predict(mod_fit, test)
quality <- c(prediction, test$quality)
is_prediction <- c(rep(1,length(prediction)), rep(0,nrow(test)))
df_prediction <- data.frame(quality, is_prediction)
str(df_prediction)
#predVals <- extractPrediction(list(mod_fit),
#                              testX = test[,1:11],
#                              testY = test[,12])
# Plot
qplot(quality, colour=is_prediction, data=df_prediction)
#plotObsVsPred(predVals)
}
plot_regression(99.6, 0, 'lm')
plot_regression <- function(training_percentage, wine_type, method) {
# Parameter selection
df = df_white
if(wine_type == 1) {
df = df_red
}
# Data slicing
inTrain <- createDataPartition(y=df$quality,
p=training_percentage/100.0, list=FALSE)
training <- df[inTrain,]
test <- df[-inTrain,]
# Model fit
mod_fit <- train(quality ~ ., data=training, method=method)
# Prediction
prediction <- predict(mod_fit, test)
quality <- c(prediction, test$quality)
is_prediction <- c(rep(1,length(prediction)), rep(0,nrow(test)))
df_prediction <- data.frame(quality, is_prediction)
str(df_prediction)
#predVals <- extractPrediction(list(mod_fit),
#                              testX = test[,1:11],
#                              testY = test[,12])
# Plot
qplot(quality, prediction, colour=is_prediction, data=df_prediction)
#plotObsVsPred(predVals)
}
plot_regression(99.6, 0, 'lm')
plot_regression <- function(training_percentage, wine_type, method) {
# Parameter selection
df = df_white
if(wine_type == 1) {
df = df_red
}
# Data slicing
inTrain <- createDataPartition(y=df$quality,
p=training_percentage/100.0, list=FALSE)
training <- df[inTrain,]
test <- df[-inTrain,]
# Model fit
mod_fit <- train(quality ~ ., data=training, method=method)
# Prediction
prediction <- predict(mod_fit, test)
#quality <- c(prediction, test$quality)
#is_prediction <- c(rep(1,length(prediction)), rep(0,nrow(test)))
#df_prediction <- data.frame(quality, is_prediction)
#str(df_prediction)
#predVals <- extractPrediction(list(mod_fit),
#                              testX = test[,1:11],
#                              testY = test[,12])
# Plot
#qplot(quality, prediction, colour=is_prediction, data=df_prediction)
qplot(quality, prediction, colour=quality, data=df_white)
#plotObsVsPred(predVals)
}
plot_regression(99.6, 0, 'lm')
plot_regression <- function(training_percentage, wine_type, method) {
# Parameter selection
df = df_white
if(wine_type == 1) {
df = df_red
}
# Data slicing
inTrain <- createDataPartition(y=df$quality,
p=training_percentage/100.0, list=FALSE)
training <- df[inTrain,]
test <- df[-inTrain,]
# Model fit
mod_fit <- train(quality ~ ., data=training, method=method)
# Prediction
prediction <- predict(mod_fit, test)
#quality <- c(prediction, test$quality)
#is_prediction <- c(rep(1,length(prediction)), rep(0,nrow(test)))
#df_prediction <- data.frame(quality, is_prediction)
#str(df_prediction)
#predVals <- extractPrediction(list(mod_fit),
#                              testX = test[,1:11],
#                              testY = test[,12])
# Plot
#qplot(quality, prediction, colour=is_prediction, data=df_prediction)
qplot(quality, prediction, colour=quality, data=test)
#plotObsVsPred(predVals)
}
plot_regression(99.6, 0, 'lm')
plot_regression(10.6, 0, 'lm')
# Load Libraries
library(caret)
library(kernlab)
library(elasticnet)
library(kknn)
library(rpart)
# Load and Process Data Sample
df_white <- preprocess_data('../data/winequality-white.csv')
df_red <- preprocess_data('../data/winequality-red.csv')
preprocess_data <- function(filename) {
df <- read.csv2(file='../data/winequality-white.csv', header=TRUE, stringsAsFactors = FALSE)
for(i in names(df)) {
df[,i] <- as.numeric(df[,i])
}
df
}
# Plot Function
plot_regression <- function(training_percentage, wine_type, method) {
# Parameter selection
df = df_white
if(wine_type == 1) {
df = df_red
}
# Data slicing
inTrain <- createDataPartition(y=df$quality,
p=training_percentage/100.0, list=FALSE)
training <- df[inTrain,]
test <- df[-inTrain,]
# Model fit
mod_fit <- train(quality ~ ., data=training, method=method)
# Prediction
prediction <- predict(mod_fit, test)
# Plot
qplot(quality, prediction, colour=quality, data=test)
}
plot_regression(10.6, 0, 'lm')
plot_regression(80, 0, 'lm')
plot_regression(90, 0, 'lm')
plot_regression(99, 0, 'lm')
# Load Libraries
library(caret)
library(kernlab)
library(elasticnet)
library(kknn)
library(rpart)
# Load and Process Data Sample
df_white <- preprocess_data('../data/winequality-white.csv')
df_red <- preprocess_data('../data/winequality-red.csv')
preprocess_data <- function(filename) {
df <- read.csv2(file='../data/winequality-white.csv', header=TRUE, stringsAsFactors = FALSE)
for(i in names(df)) {
df[,i] <- as.numeric(df[,i])
df[,i] <- (df[,i] - mean(df[,i]))/sd(df[,i])
}
df
}
# Plot Function
plot_regression <- function(training_percentage, wine_type, method) {
# Parameter selection
df = df_white
if(wine_type == 1) {
df = df_red
}
# Data slicing
inTrain <- createDataPartition(y=df$quality,
p=training_percentage/100.0, list=FALSE)
training <- df[inTrain,]
test <- df[-inTrain,]
# Model fit
mod_fit <- train(quality ~ ., data=training, method=method)
# Prediction
prediction <- predict(mod_fit, test)
# Plot
qplot(quality, prediction, colour=quality, data=test)
}
View(df_red)
df_white <- preprocess_data('../data/winequality-white.csv')
df_red <- preprocess_data('../data/winequality-red.csv')
View(df_white)
plot_regression(99, 0, 'lm')
plot_regression(80, 0, 'lasso')
plot_regression(80, 0, 'kknn')
plot_regression(80, 0, 'cart')
plot_regression(80, 0, 'rpart')
preprocess_data <- function(filename) {
df <- read.csv2(file='../data/winequality-white.csv', header=TRUE, stringsAsFactors = FALSE)
for(i in names(df)) {
df[,i] <- as.numeric(df[,i])
if(i != 12) {
df[,i] <- (df[,i] - mean(df[,i]))/sd(df[,i])
}
}
df
}
df_white <- preprocess_data('../data/winequality-white.csv')
df_red <- preprocess_data('../data/winequality-red.csv')
plot_regression(80, 0, 'rpart')
preprocess_data <- function(filename) {
df <- read.csv2(file='../data/winequality-white.csv', header=TRUE, stringsAsFactors = FALSE)
for(i in names(df)) {
df[,i] <- as.numeric(df[,i])
if(i != 'quality') {
df[,i] <- (df[,i] - mean(df[,i]))/sd(df[,i])
}
}
df
}
df_white <- preprocess_data('../data/winequality-white.csv')
df_red <- preprocess_data('../data/winequality-red.csv')
plot_regression(80, 0, 'rpart')
plot_regression(80, 0, 'lm')
source './plot_regression.R'
source('./plot_regression.R')
appRun()
runApp()
runApp()
runApp()
library(shiny)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='dmztheone',
token='FEFA54A7FFD0E93C20CA2B7236B168C8',
secret='JTePhs0UO50rxnOZ0LVWsjERuJ0NX29+mCzY2w+7')
library(shinyapps)
setwd("~/Documents/Coursera/Data Science Specialization/09.Developing Data Products/Project Courses/Shiny Application")
shinyapps::deployApp('~/Documents/Coursera/Data Science Specialization/09.Developing Data Products/Project Courses/Shiny Application')
shinyapps::deployApp('./')
shinyapps::deployApp()
setwd("~/Documents/Coursera/Data Science Specialization/09.Developing Data Products/Project Courses/wine_quality_predictor_app")
shinyapps::deployApp()
install.packages("RcppEigen")
shinyapps::deployApp()
runApp()
runApp()
runApp()
shiny::runApp()
setwd("~/Documents/Coursera/Data Science Specialization/09.Developing Data Products/Project Courses/wine_quality_predictor_app")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp()
install_github('slidify', 'ramnathv')
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
setwd("~/Documents/Coursera/Data Science Specialization/09.Developing Data Products/Project Courses/wine_quality_predictor_app/slidify_presentation")
setwd("~/Documents/Coursera/Data Science Specialization/09.Developing Data Products/Project Courses/wine_quality_predictor_app")
author('slidify_presentation')
slidify('index.Rm')
slidify('index.Rmd')
browserURL('index.html')
browseURL('index.html')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
publish(title = 'Wine Quality Predictor App - Presentation', 'index.html', host = 'rpubs')
setwd("~/Documents/Coursera/Data Science Specialization/09.Developing Data Products/Project Courses/wine_quality_predictor_app")
runApp()
runApp()
runApp()
shinyapps::deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
shiny::runApp()
warnings()
shinyapps::deployApp()
shinyapps::deployApp()
date: "January 25, 2014"
train_data <- read.csv2('pml-training.csv', sep=',')
test_data <- read.csv2('pml-testing.csv', sep=',')
setwd("~/Documents/Coursera/Data Science Specialization/08.Practical Machine Learning/Project Courses/Write Up")
train_data <- read.csv2('pml-training.csv', sep=',')
test_data <- read.csv2('pml-testing.csv', sep=',')
train_data <- read.csv2('pml-training.csv', sep=',')
test_data <- read.csv2('pml-testing.csv', sep=',')
str(train_data)
str(train_data)
names(processed_train_data)
is_to_maintain_columns <- sapply(na.omit(train_data), is.numeric)
is_to_maintain_columns[length(is_to_maintain_columns)] = TRUE
processed_train_data <- train_data[,is_to_maintain_columns]
names(processed_train_data)
names(processed_train_data)[:-1]
names(processed_train_data)[1:-1]
processed_test_data <- test_data[,names(processed_train_data)]
lapply(names(processed_train_data), function(l1, l2){l1 in l2}, names(test_data))
lapply(names(processed_train_data), function(l1, l2){l1 %in% l2}, names(test_data))
is_to_maintain_columns <- lapply(names(test_data), function(l1, l2){l1 %in% l2}, names(processed_train_data))
processed_test_data <- test_data[,is_to_maintain_columns]
processed_test_data <- test_data[,is_to_maintain_columns]
str(is_to_maintain_columns)
is_to_maintain_columns <- sapply(na.omit(train_data), is.numeric)
is_to_maintain_columns[length(is_to_maintain_columns)] = TRUE
str(is_to_maintain_columns)
is_to_maintain_columns <- lapply(names(test_data), function(l1, l2){l1 %in% l2}, names(processed_train_data))
str(is_to_maintain_columns)
str(as.list(is_to_maintain_columns))
processed_train_data <- train_data[,is_to_maintain_columns]
is_to_maintain_columns <- sapply(na.omit(train_data), is.numeric)
is_to_maintain_columns[length(is_to_maintain_columns)] = TRUE
processed_train_data <- train_data[,is_to_maintain_columns]
is_to_maintain_columns <- lapply(names(test_data), function(l1, l2){l1 %in% l2}, names(processed_train_data))
str(as.list(is_to_maintain_columns))
is_to_maintain_columns <- lapply(names(test_data), function(l1, l2){l1 %in% l2}, names(processed_train_data))
str(as.list(is_to_maintain_columns))
str(as.list(is_to_maintain_columns))
processed_test_data <- test_data[,is_to_maintain_columns]
is_to_maintain_columns <- lapply(names(test_data), function(l1, l2){l1 %in% l2}, names(processed_train_data))
str(as.list(is_to_maintain_columns))
is_to_maintain_columns[length(is_to_maintain_columns)] = TRUE
processed_train_data <- train_data[,is_to_maintain_columns]
is_to_maintain_columns <- sapply(na.omit(train_data), is.numeric)
is_to_maintain_columns[length(is_to_maintain_columns)] = TRUE
processed_train_data <- train_data[,is_to_maintain_columns]
str(as.list(is_to_maintain_columns))
is_to_maintain_columns <- lapply(names(test_data), function(l1, l2){l1 %in% l2}, names(processed_train_data))
str(as.list(is_to_maintain_columns))
processed_test_data <- test_data[,is_to_maintain_columns]
str(c(is_to_maintain_columns))
processed_test_data <- test_data[,is_to_maintain_columns]
str(is_to_maintain_columns)
is_to_maintain_columns[0]
is_to_maintain_columns[0][0]
is_to_maintain_columns[0][0][0]
is_to_maintain_columns[0][0][0][0]
is_to_maintain_columns[1]
is_to_maintain_columns <- lapply(is_to_maintain_columns)
is_to_maintain_columns <- lapply(is_to_maintain_columns, function(x){x[1]})
str(is_to_maintain_columns)
processed_test_data <- test_data[,is_to_maintain_columns]
is_to_maintain_columns <- names(test_data) %in% names(processed_train_data)
str(is_to_maintain_columns)
processed_test_data <- test_data[,is_to_maintain_columns]
library(caret)
set.seed(825)
fitControl <- trainControl(method="repeatedcv",
number=5,
repeats=1,
verboseIter=TRUE)
gbmFit <- train(classe ~ ., data=processed_train_data,
method="gbm",
trControl=fitControl,
verbose=FALSE)
predicted_values <- predict(gbmFit, processed_test_data)
predicted_values <- predict(gbmFit, processed_train_data)
plot(predicted_values)
plot(predicted_values)
predicted_values <- predict(gbmFit, processed_train_data)
plot(predicted_values)
print plot(predicted_values)
qplot(classe, predicted_values, colour=quality, data=predicted_values, alpha = 0.1, geom = c("point", "smooth"), span=1) +
scale_colour_gradient(limits=c(1, 10), low=color, high='WHITE')
y <- processed_train_data[,'classe']
as.numeric(y)
y <- processed_train_data[,'classe']
processed_train_data[,'classe'] <- as.numeric(processed_train_data[,'classe'])
y <- as.numeric(processed_train_data[,'classe'])
processed_train_data[,'classe'] <- as.numeric(y)
fitControl <- trainControl(method="repeatedcv",
number=5,
repeats=1,
verboseIter=TRUE)
gbmFit <- train(classe ~ ., data=processed_train_data,
method="gbm",
trControl=fitControl,
verbose=FALSE)
predicted_values <- predict(gbmFit, processed_train_data)
qplot(classe, predicted_values, colour=quality, data=predicted_values, alpha = 0.1, geom = c("point", "smooth"), span=1) +
scale_colour_gradient(limits=c(1, 10), low=color, high='WHITE')
plot(processed_train_data[,'classe'], predicted_values)
plot(processed_train_data[,'classe'] ~ predicted_values)
plot(processed_train_data[,'classe'] ~ predicted_values$data)
plot(processed_train_data[,'classe'] ~ predicted_values$fit)
predicted_values <- predict(gbmFit, processed_train_data)
qplot(classe, predicted_values, colour=quality, data=predicted_values, alpha = 0.1, geom = c("point", "smooth"), span=1) +
scale_colour_gradient(limits=c(1, 10), low=color, high='WHITE')
predTargets <- extractPrediction(gbmFit, testX = processed_train_data)
predTargets <- extractPrediction(gbmFit, testX = processed_train_data)
predTargets <- extractPrediction(list(gbmFit), testX = processed_train_data)
plotObsVsPred(predTargets)
